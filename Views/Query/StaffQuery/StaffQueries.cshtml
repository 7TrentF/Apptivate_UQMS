<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="~/css/staffQueries.css" asp-append-version="true">

</head>
<body>
    @model IEnumerable<Apptivate_UQMS_WebApp.Models.QueryModel.QueryAssignment>

    <!-- Dashboard Header -->
    <div class="dashboard-header">
        <h2 class="dashboard-title">My Queries Dashboard</h2>
    </div>

    <!-- Stats Overview -->
    <div class="stats-container">
        <div class="stat-card">
            <div class="stat-title">Total Queries</div>
            <div class="stat-value">0</div>
        </div>
        <div class="stat-card">
            <div class="stat-title">Pending</div>
            <div class="stat-value">0</div>
        </div>
        <div class="stat-card">
            <div class="stat-title">Resolved Today</div>
            <div class="stat-value">0</div>
        </div>
        <div class="stat-card">
            <div class="stat-title">Priority Queries</div>
            <div class="stat-value">0</div>
        </div>
    </div>

    <!-- Controls Bar -->
    <div class="controls-bar">
        <div class="search-box">
            <i class="fas fa-search search-icon"></i>
            <input type="text" class="search-input" placeholder="Search queries...">
        </div>
        <div class="filter-group">
            <select class="filter-select" id="statusFilter">
                <option value="">All Statuses</option>
                <option value="Pending">Pending</option>
                <option value="Resolved">Resolved</option>
            </select>
            <select class="filter-select" id="priorityFilter">
                <option value="">All Priorities</option>
                <option value="High">High Priority</option>
                <option value="Medium">Medium Priority</option>
                <option value="Low">Low Priority</option>
            </select>
            <select class="filter-select" id="dateFilter">
                <option value="">All Dates</option>
                <option value="today">Today</option>
                <option value="week">This Week</option>
                <option value="month">This Month</option>
            </select>
        </div>
    </div>

    <!-- Original Table with Enhancements -->
    <div class="table-container">
        <table class="query-table">
            <thead>
                <tr>
                    <th data-sort="id">Query ID <i class="fas fa-sort sort-icon"></i></th>
                    <th data-sort="description">Description <i class="fas fa-sort sort-icon"></i></th>
                    <th data-sort="date">Submission Date <i class="fas fa-sort sort-icon"></i></th>
                    <th data-sort="status">Status <i class="fas fa-sort sort-icon"></i></th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var queryAssignment in Model)
                {
                    <tr class="query-row" data-query-id="@queryAssignment.QueryID">
                        <td>@queryAssignment.Query.QueryID</td>
                        <td>@queryAssignment.Query.Description</td>
                        <td>@queryAssignment.Query.SubmissionDate?.ToString("dd MMM yyyy")</td>
                        <td>
                            <span class="status-badge @(queryAssignment.Query.Status == "Pending" ? "status-pending" : "status-resolved")">
                                <i class="fas @(queryAssignment.Query.Status == "Pending" ? "fa-clock" : "fa-check-circle")"></i>
                                @queryAssignment.Query.Status
                            </span>
                        </td>
                        <td>
                            <div class="action-buttons">
                                <a href="@Url.Action("QueryDetails", "StaffQuery", new { queryId = queryAssignment.QueryID })"
                                   class="btn btn-view">
                                    <i class="fas fa-eye"></i> View
                                </a>
                                @if (queryAssignment.ResolutionDate == null)
                                {
                                    <form asp-action="MarkAsResolved" method="post" class="resolve-form">
                                        <input type="hidden" name="queryId" value="@queryAssignment.QueryID" />
                                        <button type="submit" class="btn btn-resolve">
                                            <i class="fas fa-check"></i> Resolve
                                        </button>
                                    </form>
                                }
                                <div class="task-menu">
                                    <button class="btn" onclick="toggleTaskMenu(this)">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <div class="task-menu-content">
                                        <a href="#" class="task-menu-item">
                                            <i class="fas fa-flag"></i> Set Priority
                                        </a>
                                        <a href="#" class="task-menu-item">
                                            <i class="fas fa-user-plus"></i> Reassign
                                        </a>
                                        <a href="#" class="task-menu-item">
                                            <i class="fas fa-clock"></i> Set Reminder
                                        </a>
                                        <a href="#" class="task-menu-item">
                                            <i class="fas fa-history"></i> View History
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <div class="pagination">
        <div class="page-info">
            Showing <span id="startRange">1</span>-<span id="endRange">10</span> of <span id="totalItems">0</span> queries
        </div>
        <div class="page-buttons">
            <button class="page-button" id="prevPage" disabled>
                <i class="fas fa-chevron-left"></i> Previous
            </button>
            <button class="page-button" id="nextPage">
                Next <i class="fas fa-chevron-right"></i>
            </button>
        </div>
    </div>

    <div class="loading-overlay">
        <div class="spinner"></div>
    </div>

    <!-- Include jQuery if not already included in your layout -->
    <script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.5.1.min.js"></script>
    <script type="text/javascript">
        // Wait for document to be ready
        $(document).ready(function () {
            // Initialize statistics
            updateStats();

            // Initialize sort indicators
            let currentSort = {
                column: 'id',
                direction: 'asc'
            };

            // Search functionality
            $('.search-input').on('input', function () {
                const searchTerm = $(this).val().toLowerCase();
                filterTable();
            });

            // Filter functionality
            $('#statusFilter, #priorityFilter, #dateFilter').on('change', function () {
                filterTable();
            });

            // Sorting functionality
            $('.query-table th[data-sort]').click(function () {
                const column = $(this).data('sort');

                // Toggle sort direction
                if (currentSort.column === column) {
                    currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
                } else {
                    currentSort.column = column;
                    currentSort.direction = 'asc';
                }

                // Update sort icons
                $('.sort-icon').removeClass('fa-sort-up fa-sort-down').addClass('fa-sort');
                $(this).find('.sort-icon')
                    .removeClass('fa-sort')
                    .addClass(currentSort.direction === 'asc' ? 'fa-sort-up' : 'fa-sort-down');

                sortTable();
            });

            // Row hover effect
            $('.query-row').hover(
                function () {
                    $(this).addClass('hover');
                },
                function () {
                    $(this).removeClass('hover');
                }
            );

            // Row click handler
            $('.query-row').click(function (e) {
                if (!$(e.target).closest('a, button, form, .task-menu').length) {
                    const queryId = $(this).data('query-id');
                    window.location.href = `/StaffQuery/QueryDetails?queryId=${queryId}`;
                }
            });

            // Form submission handler
            $('.resolve-form').on('submit', function (e) {
                e.preventDefault();
                const form = $(this);
                const queryId = form.find('input[name="queryId"]').val();

                $('.loading-overlay').css('display', 'flex');

                // Simulate API call
                setTimeout(function () {
                    // Update UI
                    const row = form.closest('tr');
                    row.find('.status-badge')
                        .removeClass('status-pending')
                        .addClass('status-resolved')
                        .html('<i class="fas fa-check-circle"></i> Resolved');
                    form.remove();

                    // Update stats
                    updateStats();

                    $('.loading-overlay').hide();
                }, 1000);
            });

            // Initialize pagination
            initializePagination();
        });

        // Table filtering function
        function filterTable() {
            const searchTerm = $('.search-input').val().toLowerCase();
            const statusFilter = $('#statusFilter').val();
            const priorityFilter = $('#priorityFilter').val();
            const dateFilter = $('#dateFilter').val();

            $('.query-row').each(function () {
                const $row = $(this);
                const text = $row.text().toLowerCase();
                const status = $row.find('.status-badge').text().trim();
                const date = new Date($row.find('td:nth-child(3)').text());

                let showRow = true;

                // Search term filter
                if (searchTerm && !text.includes(searchTerm)) {
                    showRow = false;
                }

                // Status filter
                if (statusFilter && !status.includes(statusFilter.toLowerCase())) {
                    showRow = false;
                }

                // Priority filter
                if (priorityFilter) {
                    const priority = $row.data('priority');
                    if (priority !== priorityFilter.toLowerCase()) {
                        showRow = false;
                    }
                }

                // Date filter
                if (dateFilter) {
                    const today = new Date();
                    const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
                    const monthAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);

                    switch (dateFilter) {
                        case 'today':
                            if (date.toDateString() !== today.toDateString()) showRow = false;
                            break;
                        case 'week':
                            if (date < weekAgo) showRow = false;
                            break;
                        case 'month':
                            if (date < monthAgo) showRow = false;
                            break;
                    }
                }

                $row.toggle(showRow);
            });

            updatePagination();
        }

        // Table sorting function
        function sortTable() {
            const rows = $('.query-row').get();
            rows.sort(function (a, b) {
                let aVal = $(a).find(`td:eq(${getColumnIndex(currentSort.column)})`).text();
                let bVal = $(b).find(`td:eq(${getColumnIndex(currentSort.column)})`).text();

                // Convert to appropriate type for sorting
                if (currentSort.column === 'date') {
                    aVal = new Date(aVal);
                    bVal = new Date(bVal);
                } else if (currentSort.column === 'id') {
                    aVal = parseInt(aVal);
                    bVal = parseInt(bVal);
                }

                if (aVal < bVal) return currentSort.direction === 'asc' ? -1 : 1;
                if (aVal > bVal) return currentSort.direction === 'asc' ? 1 : -1;
                return 0;
            });

            $('.query-table tbody').empty().append(rows);
        }

        // Update statistics
        function updateStats() {
            const totalQueries = $('.query-row').length;
            const pendingQueries = $('.status-pending').length;
            const resolvedToday = $('.status-resolved').filter(function () {
                const date = $(this).closest('tr').find('td:eq(2)').text();
                return new Date(date).toDateString() === new Date().toDateString();
            }).length;
            const priorityQueries = $('.priority-high').length;

            $('.stat-value').eq(0).text(totalQueries);
            $('.stat-value').eq(1).text(pendingQueries);
            $('.stat-value').eq(2).text(resolvedToday);
            $('.stat-value').eq(3).text(priorityQueries);
        }

        // Pagination functions
        function initializePagination() {
            const itemsPerPage = 10;
            let currentPage = 1;

            function updatePagination() {
                const visibleRows = $('.query-row:visible');
                const totalItems = visibleRows.length;
                const totalPages = Math.ceil(totalItems / itemsPerPage);
                const startIndex = (currentPage - 1) * itemsPerPage;
                const endIndex = Math.min(startIndex + itemsPerPage, totalItems);

                // Update page info
                $('#startRange').text(totalItems ? startIndex + 1 : 0);
                $('#endRange').text(endIndex);
                $('#totalItems').text(totalItems);

                // Show/hide rows based on current page
                visibleRows.hide();
                visibleRows.slice(startIndex, endIndex).show();

                // Update button states
                $('#prevPage').prop('disabled', currentPage === 1);
                $('#nextPage').prop('disabled', currentPage === totalPages || totalPages === 0);
            }

            $('#prevPage').click(function () {
                if (currentPage > 1) {
                    currentPage--;
                    updatePagination();
                }
            });

            $('#nextPage').click(function () {
                const visibleRows = $('.query-row:visible');
                const totalPages = Math.ceil(visibleRows.length / itemsPerPage);
                if (currentPage < totalPages) {
                    currentPage++;
                    updatePagination();
                }
            });

            updatePagination();
        }

        // Task menu toggle
        function toggleTaskMenu(button) {
            event.stopPropagation();
            const menu = $(button).next('.task-menu-content');
            $('.task-menu-content').not(menu).removeClass('show');
            menu.toggleClass('show');
        }

        // Close task menus when clicking outside
        $(document).click(function (event) {
            if (!$(event.target).closest('.task-menu').length) {
                $('.task-menu-content').removeClass('show');
            }
        });

        // Helper function to get column index
        function getColumnIndex(column) {
            const indices = {
                'id': 0,
                'description': 1,
                'date': 2,
                'status': 3
            };
            return indices[column] || 0;
        }
    </script>
</body>
</html>